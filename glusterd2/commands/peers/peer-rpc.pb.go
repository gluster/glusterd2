// Code generated by protoc-gen-go. DO NOT EDIT.
// source: glusterd2/commands/peers/peer-rpc.proto

package peercommands

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StoreConfig struct {
	Endpoints            []string `protobuf:"bytes,1,rep,name=Endpoints,proto3" json:"Endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreConfig) Reset()         { *m = StoreConfig{} }
func (m *StoreConfig) String() string { return proto.CompactTextString(m) }
func (*StoreConfig) ProtoMessage()    {}
func (*StoreConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a55bf24376d7438, []int{0}
}

func (m *StoreConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoreConfig.Unmarshal(m, b)
}
func (m *StoreConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoreConfig.Marshal(b, m, deterministic)
}
func (m *StoreConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreConfig.Merge(m, src)
}
func (m *StoreConfig) XXX_Size() int {
	return xxx_messageInfo_StoreConfig.Size(m)
}
func (m *StoreConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StoreConfig proto.InternalMessageInfo

func (m *StoreConfig) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type JoinReq struct {
	PeerID               string       `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	ClusterID            string       `protobuf:"bytes,2,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	Config               *StoreConfig `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *JoinReq) Reset()         { *m = JoinReq{} }
func (m *JoinReq) String() string { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()    {}
func (*JoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a55bf24376d7438, []int{1}
}

func (m *JoinReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinReq.Unmarshal(m, b)
}
func (m *JoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinReq.Marshal(b, m, deterministic)
}
func (m *JoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinReq.Merge(m, src)
}
func (m *JoinReq) XXX_Size() int {
	return xxx_messageInfo_JoinReq.Size(m)
}
func (m *JoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_JoinReq proto.InternalMessageInfo

func (m *JoinReq) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *JoinReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *JoinReq) GetConfig() *StoreConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type JoinRsp struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	Err                  int32    `protobuf:"varint,2,opt,name=Err,proto3" json:"Err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRsp) Reset()         { *m = JoinRsp{} }
func (m *JoinRsp) String() string { return proto.CompactTextString(m) }
func (*JoinRsp) ProtoMessage()    {}
func (*JoinRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a55bf24376d7438, []int{2}
}

func (m *JoinRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRsp.Unmarshal(m, b)
}
func (m *JoinRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRsp.Marshal(b, m, deterministic)
}
func (m *JoinRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRsp.Merge(m, src)
}
func (m *JoinRsp) XXX_Size() int {
	return xxx_messageInfo_JoinRsp.Size(m)
}
func (m *JoinRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRsp.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRsp proto.InternalMessageInfo

func (m *JoinRsp) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *JoinRsp) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

type LeaveReq struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveReq) Reset()         { *m = LeaveReq{} }
func (m *LeaveReq) String() string { return proto.CompactTextString(m) }
func (*LeaveReq) ProtoMessage()    {}
func (*LeaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a55bf24376d7438, []int{3}
}

func (m *LeaveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveReq.Unmarshal(m, b)
}
func (m *LeaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveReq.Marshal(b, m, deterministic)
}
func (m *LeaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveReq.Merge(m, src)
}
func (m *LeaveReq) XXX_Size() int {
	return xxx_messageInfo_LeaveReq.Size(m)
}
func (m *LeaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveReq proto.InternalMessageInfo

func (m *LeaveReq) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

type LeaveRsp struct {
	Err                  int32    `protobuf:"varint,1,opt,name=Err,proto3" json:"Err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRsp) Reset()         { *m = LeaveRsp{} }
func (m *LeaveRsp) String() string { return proto.CompactTextString(m) }
func (*LeaveRsp) ProtoMessage()    {}
func (*LeaveRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a55bf24376d7438, []int{4}
}

func (m *LeaveRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveRsp.Unmarshal(m, b)
}
func (m *LeaveRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveRsp.Marshal(b, m, deterministic)
}
func (m *LeaveRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRsp.Merge(m, src)
}
func (m *LeaveRsp) XXX_Size() int {
	return xxx_messageInfo_LeaveRsp.Size(m)
}
func (m *LeaveRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRsp proto.InternalMessageInfo

func (m *LeaveRsp) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func init() {
	proto.RegisterType((*StoreConfig)(nil), "peercommands.StoreConfig")
	proto.RegisterType((*JoinReq)(nil), "peercommands.JoinReq")
	proto.RegisterType((*JoinRsp)(nil), "peercommands.JoinRsp")
	proto.RegisterType((*LeaveReq)(nil), "peercommands.LeaveReq")
	proto.RegisterType((*LeaveRsp)(nil), "peercommands.LeaveRsp")
}

func init() {
	proto.RegisterFile("glusterd2/commands/peers/peer-rpc.proto", fileDescriptor_9a55bf24376d7438)
}

var fileDescriptor_9a55bf24376d7438 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x8d, 0x75, 0xd5, 0xbe, 0xf5, 0x20, 0x01, 0x47, 0x1d, 0x3b, 0x94, 0x5c, 0x2c, 0x88,
	0x1d, 0x76, 0x20, 0x78, 0xde, 0x76, 0x98, 0x78, 0x90, 0xec, 0x13, 0xcc, 0xf6, 0x75, 0x14, 0x5c,
	0x12, 0xdf, 0xd4, 0x9d, 0xfd, 0xe8, 0x92, 0xfe, 0x71, 0x1b, 0x54, 0x2f, 0x21, 0xef, 0x93, 0x27,
	0xcf, 0xf3, 0x23, 0x81, 0xdb, 0xcd, 0xc7, 0x97, 0xad, 0x90, 0x8a, 0x6c, 0x92, 0xeb, 0xed, 0x76,
	0xad, 0x0a, 0x3b, 0x31, 0x88, 0xd4, 0xac, 0xf7, 0x64, 0xf2, 0xd4, 0x90, 0xae, 0x34, 0xbf, 0x74,
	0x73, 0x67, 0x11, 0x77, 0x10, 0xae, 0x2a, 0x4d, 0x38, 0xd3, 0xea, 0xbd, 0xdc, 0xf0, 0x31, 0x04,
	0x0b, 0x55, 0x18, 0x5d, 0xaa, 0xca, 0x46, 0x2c, 0xf6, 0x92, 0x40, 0xee, 0x05, 0x41, 0x70, 0xfe,
	0xac, 0x4b, 0x25, 0xf1, 0x93, 0x0f, 0xc1, 0x7f, 0x45, 0xa4, 0xe5, 0x3c, 0x62, 0x31, 0x4b, 0x02,
	0xd9, 0x4e, 0x2e, 0x60, 0xd6, 0x80, 0x2c, 0xe7, 0xd1, 0x69, 0x7d, 0xb4, 0x17, 0xf8, 0x03, 0xf8,
	0x4d, 0x51, 0xe4, 0xc5, 0x2c, 0x09, 0xb3, 0x9b, 0xf4, 0x10, 0x26, 0x3d, 0x20, 0x91, 0xad, 0x51,
	0x4c, 0xdb, 0x4e, 0x6b, 0xfe, 0xec, 0xbc, 0x02, 0x6f, 0x41, 0x54, 0xb7, 0x0d, 0xa4, 0xdb, 0x0a,
	0x01, 0x17, 0x2f, 0xb8, 0xde, 0xe1, 0x3f, 0xa4, 0x62, 0xdc, 0x79, 0xac, 0xe9, 0x12, 0xd8, 0x6f,
	0x42, 0xf6, 0xcd, 0x20, 0x74, 0xc6, 0x15, 0xd2, 0xae, 0xcc, 0x91, 0x3f, 0xc2, 0x99, 0xc3, 0xe0,
	0xd7, 0xc7, 0xc4, 0xed, 0x73, 0x8c, 0xfa, 0x64, 0x6b, 0xc4, 0x09, 0x7f, 0x82, 0x41, 0xdd, 0xc2,
	0x87, 0xc7, 0x8e, 0x0e, 0x6f, 0xd4, 0xab, 0xbb, 0xab, 0x6f, 0x7e, 0xfd, 0x5f, 0xd3, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0xc1, 0x05, 0x89, 0xda, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerServiceClient interface {
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRsp, error)
	Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*LeaveRsp, error)
}

type peerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPeerServiceClient(cc *grpc.ClientConn) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRsp, error) {
	out := new(JoinRsp)
	err := c.cc.Invoke(ctx, "/peercommands.PeerService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*LeaveRsp, error) {
	out := new(LeaveRsp)
	err := c.cc.Invoke(ctx, "/peercommands.PeerService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServiceServer is the server API for PeerService service.
type PeerServiceServer interface {
	Join(context.Context, *JoinReq) (*JoinRsp, error)
	Leave(context.Context, *LeaveReq) (*LeaveRsp, error)
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peercommands.PeerService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peercommands.PeerService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Leave(ctx, req.(*LeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peercommands.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _PeerService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _PeerService_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "glusterd2/commands/peers/peer-rpc.proto",
}
