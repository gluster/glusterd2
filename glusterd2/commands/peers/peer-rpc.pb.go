// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer-rpc.proto

/*
Package peercommands is a generated protocol buffer package.

It is generated from these files:
	peer-rpc.proto

It has these top-level messages:
	StoreConfig
	JoinReq
	JoinRsp
	LeaveReq
	LeaveRsp
*/
package peercommands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StoreConfig struct {
	Endpoints []string `protobuf:"bytes,1,rep,name=Endpoints" json:"Endpoints,omitempty"`
}

func (m *StoreConfig) Reset()                    { *m = StoreConfig{} }
func (m *StoreConfig) String() string            { return proto.CompactTextString(m) }
func (*StoreConfig) ProtoMessage()               {}
func (*StoreConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StoreConfig) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type JoinReq struct {
	PeerID    string       `protobuf:"bytes,1,opt,name=PeerID" json:"PeerID,omitempty"`
	ClusterID string       `protobuf:"bytes,2,opt,name=ClusterID" json:"ClusterID,omitempty"`
        Group     int32        `protobuf:"varint,8,opt,name=Group" json:"group,omitempty"`
	Config    *StoreConfig `protobuf:"bytes,3,opt,name=Config" json:"Config,omitempty"`
}

func (m *JoinReq) Reset()                    { *m = JoinReq{} }
func (m *JoinReq) String() string            { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()               {}
func (*JoinReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JoinReq) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *JoinReq) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *JoinReq) GetConfig() *StoreConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type JoinRsp struct {
	PeerID string `protobuf:"bytes,1,opt,name=PeerID" json:"PeerID,omitempty"`
	Err    int32  `protobuf:"varint,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *JoinRsp) Reset()                    { *m = JoinRsp{} }
func (m *JoinRsp) String() string            { return proto.CompactTextString(m) }
func (*JoinRsp) ProtoMessage()               {}
func (*JoinRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoinRsp) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *JoinRsp) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

type LeaveReq struct {
	PeerID string `protobuf:"bytes,1,opt,name=PeerID" json:"PeerID,omitempty"`
}

func (m *LeaveReq) Reset()                    { *m = LeaveReq{} }
func (m *LeaveReq) String() string            { return proto.CompactTextString(m) }
func (*LeaveReq) ProtoMessage()               {}
func (*LeaveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LeaveReq) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

type LeaveRsp struct {
	Err int32 `protobuf:"varint,1,opt,name=Err" json:"Err,omitempty"`
}

func (m *LeaveRsp) Reset()                    { *m = LeaveRsp{} }
func (m *LeaveRsp) String() string            { return proto.CompactTextString(m) }
func (*LeaveRsp) ProtoMessage()               {}
func (*LeaveRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LeaveRsp) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func init() {
	proto.RegisterType((*StoreConfig)(nil), "peercommands.StoreConfig")
	proto.RegisterType((*JoinReq)(nil), "peercommands.JoinReq")
	proto.RegisterType((*JoinRsp)(nil), "peercommands.JoinRsp")
	proto.RegisterType((*LeaveReq)(nil), "peercommands.LeaveReq")
	proto.RegisterType((*LeaveRsp)(nil), "peercommands.LeaveRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PeerService service

type PeerServiceClient interface {
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRsp, error)
	Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*LeaveRsp, error)
}

type peerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPeerServiceClient(cc *grpc.ClientConn) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRsp, error) {
	out := new(JoinRsp)
	err := grpc.Invoke(ctx, "/peercommands.PeerService/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Leave(ctx context.Context, in *LeaveReq, opts ...grpc.CallOption) (*LeaveRsp, error) {
	out := new(LeaveRsp)
	err := grpc.Invoke(ctx, "/peercommands.PeerService/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PeerService service

type PeerServiceServer interface {
	Join(context.Context, *JoinReq) (*JoinRsp, error)
	Leave(context.Context, *LeaveReq) (*LeaveRsp, error)
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peercommands.PeerService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peercommands.PeerService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Leave(ctx, req.(*LeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peercommands.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _PeerService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _PeerService_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer-rpc.proto",
}

func init() { proto.RegisterFile("peer-rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x8d, 0x75, 0xd5, 0xbe, 0x8a, 0xc8, 0x03, 0x47, 0x1d, 0x3b, 0x94, 0x9c, 0x0a, 0x62,
	0xc1, 0x0d, 0x04, 0xcf, 0x73, 0x07, 0xc5, 0x83, 0x64, 0x7f, 0xc1, 0xec, 0x9e, 0x52, 0x70, 0x49,
	0x7c, 0xa9, 0x3b, 0xfb, 0xa7, 0x4b, 0x62, 0xeb, 0x36, 0xa8, 0xde, 0xf2, 0xbe, 0xf7, 0xe5, 0xfb,
	0x7e, 0x24, 0x70, 0x66, 0x89, 0xf8, 0x9a, 0x6d, 0x55, 0x5a, 0x36, 0x8d, 0xc1, 0x53, 0x3f, 0x57,
	0x66, 0xbd, 0x5e, 0xea, 0x95, 0x93, 0x57, 0x90, 0x2e, 0x1a, 0xc3, 0x34, 0x33, 0xfa, 0xb5, 0x7e,
	0xc3, 0x31, 0x24, 0x73, 0xbd, 0xb2, 0xa6, 0xd6, 0x8d, 0xcb, 0x44, 0x1e, 0x15, 0x89, 0xda, 0x0a,
	0x92, 0xe1, 0xf8, 0xd1, 0xd4, 0x5a, 0xd1, 0x07, 0x0e, 0x21, 0x7e, 0x26, 0xe2, 0x87, 0xfb, 0x4c,
	0xe4, 0xa2, 0x48, 0x54, 0x3b, 0xf9, 0x80, 0xd9, 0xfb, 0xa7, 0x6b, 0xc2, 0xea, 0x30, 0xac, 0xb6,
	0x02, 0xde, 0x40, 0xfc, 0x53, 0x94, 0x45, 0xb9, 0x28, 0xd2, 0xc9, 0x65, 0xb9, 0x0b, 0x53, 0xee,
	0x90, 0xa8, 0xd6, 0x28, 0xa7, 0x6d, 0xa7, 0xb3, 0x7f, 0x76, 0x9e, 0x43, 0x34, 0x67, 0x0e, 0x6d,
	0x03, 0xe5, 0x8f, 0x52, 0xc2, 0xc9, 0x13, 0x2d, 0x37, 0xf4, 0x0f, 0xa9, 0x1c, 0x77, 0x1e, 0x67,
	0xbb, 0x04, 0xf1, 0x9b, 0x30, 0xf9, 0x12, 0x90, 0x7a, 0xe3, 0x82, 0x78, 0x53, 0x57, 0x84, 0xb7,
	0x70, 0xe4, 0x31, 0xf0, 0x62, 0x9f, 0xb8, 0x7d, 0x8e, 0x51, 0x9f, 0xec, 0xac, 0x3c, 0xc0, 0x3b,
	0x18, 0x84, 0x16, 0x1c, 0xee, 0x3b, 0x3a, 0xbc, 0x51, 0xaf, 0xee, 0xaf, 0xbe, 0xc4, 0xe1, 0xbf,
	0xa6, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x3e, 0xe7, 0x68, 0xc1, 0x01, 0x00, 0x00,
}
