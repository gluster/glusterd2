// generated by jsonenums -type=OptionLevel; DO NOT EDIT

package api

import (
	"encoding/json"
	"fmt"
)

var (
	_OptionLevelNameToValue = map[string]OptionLevel{
		"OptionStatusAdvanced":     OptionStatusAdvanced,
		"OptionStatusBasic":        OptionStatusBasic,
		"OptionStatusExperimental": OptionStatusExperimental,
		"OptionStatusDeprecated":   OptionStatusDeprecated,
		"OptionStatusUndefined":    OptionStatusUndefined,
	}

	_OptionLevelValueToName = map[OptionLevel]string{
		OptionStatusAdvanced:     "OptionStatusAdvanced",
		OptionStatusBasic:        "OptionStatusBasic",
		OptionStatusExperimental: "OptionStatusExperimental",
		OptionStatusDeprecated:   "OptionStatusDeprecated",
		OptionStatusUndefined:    "OptionStatusUndefined",
	}
)

func init() {
	var v OptionLevel
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OptionLevelNameToValue = map[string]OptionLevel{
			interface{}(OptionStatusAdvanced).(fmt.Stringer).String():     OptionStatusAdvanced,
			interface{}(OptionStatusBasic).(fmt.Stringer).String():        OptionStatusBasic,
			interface{}(OptionStatusExperimental).(fmt.Stringer).String(): OptionStatusExperimental,
			interface{}(OptionStatusDeprecated).(fmt.Stringer).String():   OptionStatusDeprecated,
			interface{}(OptionStatusUndefined).(fmt.Stringer).String():    OptionStatusUndefined,
		}
	}
}

// MarshalJSON is generated so OptionLevel satisfies json.Marshaler.
func (r OptionLevel) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OptionLevelValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OptionLevel: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so OptionLevel satisfies json.Unmarshaler.
func (r *OptionLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OptionLevel should be a string, got %s", data)
	}
	v, ok := _OptionLevelNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OptionLevel %q", s)
	}
	*r = v
	return nil
}
